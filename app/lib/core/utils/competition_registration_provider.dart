import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:injectable/injectable.dart';

@singleton
class CompetitionRegistrationProvider {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// V√©rifie si un adh√©rent est d√©j√† inscrit √† une comp√©tition
  Future<bool> isAdherentRegistered(String competitionId, String adherentId) async {
    try {
      final query = await _firestore
          .collection('competition_registration')
          .where('competitionId', isEqualTo: competitionId)
          .where('adherentId', isEqualTo: adherentId)
          .get();

      return query.docs.isNotEmpty;
    } catch (e) {
      debugPrint("Erreur lors de la v√©rification d'inscription : $e");
      return false;
    }
  }

  /// R√©cup√®re toutes les inscriptions (IDs de comp√©titions) pour un adh√©rent
  Future<List<String>> getUserInscriptionsForAdherent(String adherentId) async {
    final query = await FirebaseFirestore.instance
        .collection('competition_registration')
        .where('adherentId', isEqualTo: adherentId)
        .get();

    // üëâ Retourner la vraie liste des competitionId
    return query.docs.map((doc) => doc['competitionId'] as String).toList();
  }


  /// Inscrire un adh√©rent si pas d√©j√† inscrit
  Future<String> inscrireACompetition(String competitionId, String adherentId) async {
    try {
      final alreadyRegistered = await isAdherentRegistered(competitionId, adherentId);
      if (alreadyRegistered) {
        return "‚ö†Ô∏è Vous √™tes d√©j√† inscrit √† cette comp√©tition.";
      }

      await _firestore.collection('competition_registration').add({
        'competitionId': competitionId,
        'adherentId': adherentId,
        'createdAt': FieldValue.serverTimestamp(),
      });

      return "‚úÖ Inscription r√©ussie !";
    } catch (e) {
      debugPrint("Erreur lors de l'inscription : $e");
      return "‚ùå Une erreur est survenue.";
    }
  }


}
