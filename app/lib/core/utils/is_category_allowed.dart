import 'package:judoseclin/core/di/api/firestore_service.dart';
import 'package:flutter/material.dart';



Future<bool> isCategoryAllowed(String userEmail, String competitionId, FirestoreService firestore) async {
  try {
    // üîç Recherche l'adh√©rent correspondant √† l'email
    final adherentsSnapshot = await firestore.getCollection('adherents')
        .where('email', isEqualTo: userEmail)
        .limit(1)
        .get();

    if (adherentsSnapshot.docs.isEmpty) {
      debugPrint("‚ùå Adh√©rent non trouv√© pour l'email : $userEmail");
      throw Exception("Adh√©rent non trouv√©");
    }

    // ‚úÖ R√©cup√©ration des donn√©es sous forme de Map<String, dynamic>
    final adherentData = adherentsSnapshot.docs.first.data() as Map<String, dynamic>?;

    if (adherentData == null || !adherentData.containsKey('category')) {
      debugPrint("‚ùå Donn√©es adh√©rent incorrectes ou cat√©gorie absente");
      throw Exception("Donn√©es adh√©rent incorrectes");
    }

    final adherentCategory = adherentData['category'];

    // üîç R√©cup√©ration des donn√©es de la comp√©tition
    final competitionDoc = await firestore.getCollection('competition').doc(competitionId).get();

    if (!competitionDoc.exists) {
      debugPrint("‚ùå Comp√©tition non trouv√©e pour ID : $competitionId");
      throw Exception("Comp√©tition non trouv√©e");
    }

    // ‚úÖ V√©rification des donn√©es de la comp√©tition
    final competitionData = competitionDoc.data() as Map<String, dynamic>?;

    if (competitionData == null) {
      throw Exception("Donn√©es de la comp√©tition introuvables");
    }

    // ‚úÖ V√©rification que la cat√©gorie de l'adh√©rent existe bien dans la comp√©tition
    if (competitionData.containsKey(adherentCategory) && competitionData[adherentCategory] != null) {
      debugPrint("‚úÖ L'adh√©rent peut participer √† la comp√©tition !");
      return true;
    } else {
      debugPrint("‚ùå Cat√©gorie non autoris√©e : $adherentCategory");
      throw Exception("Votre cat√©gorie ne fait pas partie de cette comp√©tition");
    }
  } catch (e) {
    debugPrint("üö® Erreur v√©rification cat√©gorie : $e");
    return false;
  }
}

